import unittest
from unittest.mock import mock_open, patch
from nexler.utils import faker_util
import json


class TestFakeUsers(unittest.TestCase):

    def test_fake_users(self):
        users = faker_util.fake_users()
        self.assertEqual(len(users), 10)
        for user in users:
            self.assertTrue('first_name' in user)
            self.assertTrue('last_name' in user)
            self.assertTrue('date_of_birth' in user)
            self.assertTrue('phone' in user)
            self.assertTrue('email' in user)
            self.assertTrue('password' in user)

    @patch("nexler.utils.faker_util.fake_users")
    @patch("builtins.open", new_callable=mock_open)
    def test_write_csv(self, mock_open, mock_fake_users):
        # Mock the users generated by fake_users()
        mock_fake_users.return_value = [{'first_name': 'Test', 'last_name': 'User', 'date_of_birth': '2000-12-30',
                                         'phone': '1234567890', 'email': 'test@example.com', 'password': 'password'}]*10
        faker_util.write_csv()

        # Check that open was called for correct file names
        mock_open.assert_called_once_with('users.csv', 'w', newline='')

        # Get the written data for csv
        csv_handle = mock_open.return_value.__enter__.return_value
        csv_writes = [args[0] for args, _ in csv_handle.write.call_args_list]

        # Assert the length of the data
        line_count = sum([write.count('\n') for write in csv_writes])
        self.assertEqual(line_count, 11)  # 10 users + header

    @patch("nexler.utils.faker_util.fake_users")
    @patch("builtins.open", new_callable=mock_open)
    def test_write_json(self, mock_open, mock_fake_users):
        # Mock the users generated by fake_users()
        mock_fake_users.return_value = [{'first_name': 'Test', 'last_name': 'User', 'date_of_birth': '2000-12-30',
                                         'phone': '1234567890', 'email': 'test@example.com',
                                         'password': 'password'}] * 10
        faker_util.write_json()

        # Check that open was called for correct file names
        mock_open.assert_called_once_with('users.json', 'w')

        # Get the written data for json
        json_handle = mock_open.return_value.__enter__.return_value
        json_writes = [call[0][0] for call in json_handle.write.call_args_list]

        # concatenate all written data to form the full JSON string
        json_data = ''.join(json_writes)
        print(json_data)

        self.assertEqual(len(json.loads(json_data)), 10)


if __name__ == "__main__":
    unittest.main()
